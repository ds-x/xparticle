<jittershader name="texture2DRect:1-fill-flat-triangles">
	<description>
		An auto-generated shader for simulating deprecated OpenGL features in OpenGL 3.2+
	</description>
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />
	<param name="velocity" type="vec3" state="NORMAL" />
	<param name="tex0" type="int" default="0" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="color" type="vec4" state="COLOR" />

	<param name="pointSize" type="float" default="1.0" />
	<param name="hsv" type="vec3" default="1.0 1.0 1.0" />
	<param name="useSecondColor" type="int" default="0" />
	<param name="useMovement" type="int" default="0" /> 
	<param name="uMovement" type="float" default="0.0" />
	<param name="uLuminance" type="float" default="0.0" />  
	<param name="uColormode" type="int" default="0" /> 
	<param name="uAlpha" type="int" default="0" /> 

	<language name="glsl" version="1.5">
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />
		<bind param="tex0" program="fp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="color" program="vp" />
		<bind param="velocity" program="vp" />

		<bind param="pointSize" program="vp" />
		<bind param="hsv" program="fp" />
		<bind param="useSecondColor" program="fp" />
		<bind param="useMovement" program="fp" /> 
		<bind param="uMovement" program="fp" />
		<bind param="uLuminance" program="fp" />  
		<bind param="uColormode" program="fp" />
		<bind param="uAlpha" program="fp" />
		

		<program name="vp" type="vertex">
			<![CDATA[
// Preprocessor
#version 330 core
uniform mat4 modelViewProjectionMatrix;

uniform mat4 textureMatrix0;
uniform float pointSize;

in vec3 position;
in vec4 color;
in vec2 texcoord;
in vec3 velocity;

out jit_PerVertex {
	flat vec4 color;
	vec2 texcoord0; 
	vec3 velocity;
} jit_out;

void main() {
	gl_Position = modelViewProjectionMatrix * vec4(position, 1.);	
	jit_out.color = color;
	jit_out.texcoord0 = vec2(textureMatrix0*vec4(texcoord, 0., 1.));

	jit_out.velocity = velocity.xyz;

	gl_PointSize = pointSize;
}


]]>
		</program>
		<program name="fp" type="fragment">
			<![CDATA[
#version 330 core

in jit_PerVertex {
	flat vec4 color;
	vec2 texcoord0; 
	vec3 velocity;
} jit_in;
out vec4 color;

uniform sampler2DRect tex0;
uniform vec3 hsv;
uniform int useSecondColor;
uniform int useMovement; 
uniform int uColormode;
uniform float uMovement;
uniform float uLuminance;
uniform int uAlpha;

const vec4 lumcoeff = vec4(0.2125,0.7154,0.0721,0.0);

vec3 hsv2rgb(vec3 c) {
  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}



void main() {

	
	
	color = jit_in.color;
	
	vec4 textureColor = texture(tex0, jit_in.texcoord0);

	vec4 secondColor = vec4(hsv2rgb(hsv),1.0);
	
	
	vec4 white = vec4(1.0,1.0,1.0,1.0);	
	float luminance = dot(textureColor, lumcoeff);
	vec4 texColor = white;
	

	switch(uColormode) 

	{
		case 0:

			// WHITE except Black
			
			white.a = uAlpha == 0 ? 1.0 : luminance; 

			if (luminance > 0.05) {
				texColor = white;
			} else {
				discard;
			}
			
			
			break;
		
		case 1:

			// BRIGHTNESS
			
			if (luminance > 0.05) {
				texColor = vec4(vec3(luminance),luminance);
			} else { 
				discard; 
			}

			break;

		case 2:

			textureColor.a = uAlpha == 0 ? 1.0 : luminance;
			texColor = textureColor;
			
			break;
		

	}

	
	float movementcolor = length(jit_in.velocity) * 1000.0;
	
	texColor = useMovement == 0 ? texColor : texColor * movementcolor;

	vec4 otherColor = mix(texColor, vec4(texColor.rgb*0.3,luminance) + secondColor, movementcolor);
	texColor = useSecondColor == 0 ? texColor : otherColor;

	color = texColor;

	

	float len = length(gl_PointCoord - 0.5);

	if (len >= 0.5) discard;
	if (movementcolor < uMovement) discard;
	if (luminance < uLuminance) discard;

	

	//color.a = smoothstep(0.5,0.0,len);
}	

]]>
		</program>
	</language>
</jittershader>
